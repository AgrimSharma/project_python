# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2015-12-07 11:12
from __future__ import unicode_literals

import apps.classic.models
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('organizations', '0002_auto_20151204_1248'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('attachment_file', models.FileField(upload_to=apps.classic.models.classic_attachment_attachment_upload, verbose_name=b'attachment')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name=b'created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name=b'modified')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_attachment', to='contenttypes.ContentType')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_created_attachments', to=settings.AUTH_USER_MODEL, verbose_name=b'creator')),
            ],
            options={
                'db_table': 'attachments_attachment',
            },
        ),
        migrations.CreateModel(
            name='BacklogHistorySnapshot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'kanban_backloghistorysnapshot',
            },
        ),
        migrations.CreateModel(
            name='BacklogHistoryStories',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snapshot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_stories', to='classic.BacklogHistorySnapshot')),
            ],
            options={
                'db_table': 'kanban_backloghistorystories',
            },
        ),
        migrations.CreateModel(
            name='BasecampCredentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oauth_token', models.CharField(max_length=512)),
                ('failure_count', models.IntegerField(default=0)),
                ('basecamp_account', models.IntegerField()),
                ('basecamp_project', models.IntegerField()),
                ('basecamp_project_name', models.CharField(default=b'', max_length=256)),
                ('basecamp_todo_list', models.IntegerField(default=-1)),
                ('download_todos', models.BooleanField(default=False, help_text=b'Should ScrumDo download Basecamp Todos as stories?')),
                ('upload_stories', models.BooleanField(default=False, help_text=b'Should ScrumDo upload stories as Basecamp Todos?  This will upload ALL of your stories to Basecamp.')),
                ('delete_todos', models.BooleanField(default=False, help_text=b'When a story is deleted, should the associated todo be deleted?')),
                ('update_status', models.BooleanField(default=True, help_text=b'Should ScrumDo sync status between stories and todo items?')),
            ],
            options={
                'db_table': 'basecamp_next_basecampcredentials',
            },
        ),
        migrations.CreateModel(
            name='BasecampEtags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('todo_list_id', models.IntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('etag', models.CharField(max_length=48)),
            ],
            options={
                'db_table': 'basecamp_next_basecampetags',
            },
        ),
        migrations.CreateModel(
            name='BoardAttributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.CharField(max_length=6)),
                ('key', models.CharField(max_length=4)),
                ('value', models.TextField()),
            ],
            options={
                'db_table': 'projects_boardattributes',
            },
        ),
        migrations.CreateModel(
            name='BoardCell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cellType', models.SmallIntegerField(default=0)),
                ('label', models.CharField(max_length=100, null=True)),
                ('layout', models.PositiveSmallIntegerField(default=0)),
                ('headerColor', models.IntegerField(default=11184810)),
                ('backgroundColor', models.IntegerField(default=16448250)),
                ('wipLimit', models.IntegerField(default=-1)),
                ('pointLimit', models.IntegerField(default=-1)),
                ('x', models.IntegerField(default=0)),
                ('y', models.IntegerField(default=0)),
                ('width', models.IntegerField(default=200)),
                ('height', models.IntegerField(default=200)),
                ('policy_text', models.TextField(blank=True, default=b'')),
                ('time_type', models.PositiveSmallIntegerField(default=2)),
                ('leadTime', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'kanban_boardcell',
            },
        ),
        migrations.CreateModel(
            name='BoardGraphic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('graphic_type', models.IntegerField(default=0)),
                ('label', models.CharField(max_length=128)),
                ('sx', models.IntegerField()),
                ('sy', models.IntegerField()),
                ('ex', models.IntegerField()),
                ('ey', models.IntegerField()),
                ('foreground', models.IntegerField(default=11184810)),
                ('background', models.IntegerField(default=11184810)),
            ],
            options={
                'db_table': 'kanban_boardgraphic',
            },
        ),
        migrations.CreateModel(
            name='BoardHeader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sx', models.IntegerField()),
                ('sy', models.IntegerField()),
                ('ex', models.IntegerField()),
                ('ey', models.IntegerField()),
                ('background', models.IntegerField(default=4473924)),
                ('label', models.CharField(max_length=128)),
                ('policy_text', models.TextField(blank=True, default=b'')),
            ],
            options={
                'db_table': 'kanban_boardheader',
            },
        ),
        migrations.CreateModel(
            name='BoardImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sx', models.IntegerField()),
                ('sy', models.IntegerField()),
                ('ex', models.IntegerField()),
                ('ey', models.IntegerField()),
                ('image_file', models.ImageField(height_field=b'image_height', upload_to=apps.classic.models.board_image_attachment_upload, width_field=b'image_width')),
                ('image_height', models.IntegerField(default=0)),
                ('image_width', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'kanban_boardimage',
            },
        ),
        migrations.CreateModel(
            name='CellMovement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('cell_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='classic.BoardCell')),
            ],
            options={
                'db_table': 'kanban_cellmovement',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField()),
                ('date_submitted', models.DateTimeField()),
                ('comment', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'threadedcomments_threadedcomment',
            },
        ),
        migrations.CreateModel(
            name='Commit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(default=b'', max_length=24)),
                ('full_text', models.TextField()),
                ('link', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'projects_commit',
            },
        ),
        migrations.CreateModel(
            name='Epic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_id', models.IntegerField()),
                ('summary', models.TextField()),
                ('detail', models.TextField(blank=True)),
                ('points', models.CharField(blank=True, default=b'?', help_text=b'Rough size of this epic (including size of sub-epics or stories).  Enter ? to specify no sizing.', max_length=4, verbose_name=b'points')),
                ('order', models.IntegerField(default=5000)),
                ('archived', models.BooleanField(default=False, help_text=b"Archived epics are generally hidden and their points don't count towards the project.")),
                ('status', models.SmallIntegerField(choices=[(0, b'Initial'), (1, b'Stories Written'), (2, b'Blocked'), (3, b'Completed')], default=0)),
                ('parent', models.ForeignKey(help_text=b'What epic does this one belong within?', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='classic_children', to='classic.Epic', verbose_name=b'Parent Epic')),
            ],
            options={
                'ordering': ['order'],
                'db_table': 'projects_epic',
            },
        ),
        migrations.CreateModel(
            name='ExternalStoryMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(max_length=40)),
                ('external_url', models.CharField(blank=True, max_length=256, null=True)),
                ('extra_slug', models.CharField(max_length=20)),
                ('external_extra', models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={
                'db_table': 'extras_externalstorymapping',
            },
        ),
        migrations.CreateModel(
            name='ExternalTaskMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(max_length=40)),
                ('external_url', models.CharField(blank=True, max_length=256, null=True)),
                ('extra_slug', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'extras_externaltaskmapping',
            },
        ),
        migrations.CreateModel(
            name='ExtraConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_slug', models.CharField(max_length=25, verbose_name=b'extra_slug')),
                ('project_slug', models.CharField(max_length=55, verbose_name=b'project_slug')),
                ('configuration_pickle', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'extras_extraconfiguration',
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favorite_type', models.IntegerField(choices=[(0, b'Story'), (1, b'Project'), (2, b'Iteration'), (3, b'Epic')])),
                ('epic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Epic')),
            ],
            options={
                'db_table': 'favorites_favorite',
            },
        ),
        migrations.CreateModel(
            name='GithubBinding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('github_slug', models.CharField(help_text=b'You must have GitHub admin privileges to connect to a repo.', max_length=64, verbose_name=b'GitHub Repo')),
                ('upload_issues', models.BooleanField(default=False, help_text=b'Upload ScrumDo stories as GitHub issues. (Careful, this will upload all existing stories.)')),
                ('download_issues', models.BooleanField(default=True, help_text=b'Download GitHub issues into the ScrumDo story queue.')),
                ('delete_issues', models.BooleanField(default=False, help_text=b'Should ScrumDo close an associated GitHub issue when a story is deleted?')),
                ('log_commit_messages', models.BooleanField(default=True, help_text=b'Do you want GitHub commit messages in your scrum log?')),
                ('commit_status_updates', models.BooleanField(default=True, help_text=b'Allow users to update story status via commit messages.')),
            ],
            options={
                'db_table': 'github_integration_githubbinding',
            },
        ),
        migrations.CreateModel(
            name='GithubCredentials',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oauth_token', models.CharField(max_length=64)),
                ('failure_count', models.IntegerField(default=0)),
                ('github_username', models.CharField(max_length=48)),
            ],
            options={
                'db_table': 'github_integration_githubcredentials',
            },
        ),
        migrations.CreateModel(
            name='GithubLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now=True)),
                ('message', models.TextField()),
            ],
            options={
                'db_table': 'github_integration_githublog',
            },
        ),
        migrations.CreateModel(
            name='Iteration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name=b'name')),
                ('detail', models.TextField(blank=True, verbose_name=b'detail')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('default_iteration', models.BooleanField(default=False)),
                ('locked', models.BooleanField(default=False)),
                ('iteration_type', models.SmallIntegerField(default=1)),
                ('include_in_velocity', models.BooleanField(default=True, verbose_name=b'include_in_velocity')),
                ('hidden', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'projects_iteration',
            },
        ),
        migrations.CreateModel(
            name='KanbanStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_lead_time', models.IntegerField()),
                ('daily_flow_efficiency', models.IntegerField()),
                ('system_lead_time', models.IntegerField()),
                ('system_flow_efficiency', models.IntegerField()),
                ('created', models.DateField(auto_now_add=True)),
            ],
            options={
                'db_table': 'kanban_kanbanstat',
            },
        ),
        migrations.CreateModel(
            name='NewsItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=datetime.datetime.now, verbose_name=b'created')),
                ('text', models.TextField()),
                ('icon', models.CharField(max_length=24)),
                ('feed_url', models.CharField(blank=True, max_length=75, null=True)),
            ],
            options={
                'db_table': 'activities_newsitem',
            },
        ),
        migrations.CreateModel(
            name='PointsLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('points_status1', models.IntegerField(default=0)),
                ('points_status2', models.IntegerField(default=0)),
                ('points_status3', models.IntegerField(default=0)),
                ('points_status4', models.IntegerField(default=0)),
                ('points_status5', models.IntegerField(default=0)),
                ('points_status6', models.IntegerField(default=0)),
                ('points_status7', models.IntegerField(default=0)),
                ('points_status8', models.IntegerField(default=0)),
                ('points_status9', models.IntegerField(default=0)),
                ('points_status10', models.IntegerField(default=0)),
                ('time_estimated', models.IntegerField(default=0)),
                ('time_estimated_completed', models.IntegerField(default=0)),
                ('points_total', models.IntegerField()),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['date'],
                'db_table': 'projects_pointslog',
            },
        ),
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy_type', models.SmallIntegerField(default=0)),
                ('user_defined', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=128)),
                ('related_value', models.IntegerField()),
            ],
            options={
                'db_table': 'kanban_policy',
            },
        ),
        migrations.CreateModel(
            name='PolicyAge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entered', models.DateTimeField(auto_now_add=True)),
                ('exited', models.DateTimeField(default=None, null=True)),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Policy')),
            ],
            options={
                'db_table': 'kanban_policyage',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_type', models.SmallIntegerField(choices=[(0, b'Scrum'), (1, b'Scrumban')], default=0)),
                ('slug', models.SlugField(unique=True, verbose_name=b'slug')),
                ('name', models.CharField(max_length=80, verbose_name=b'name')),
                ('created', models.DateTimeField(default=datetime.datetime.now, verbose_name=b'created')),
                ('description', models.TextField(blank=True, default=b'', null=True, verbose_name=b'description')),
                ('personal', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('private', models.BooleanField(default=True, verbose_name=b'private')),
                ('use_assignee', models.BooleanField(default=True)),
                ('use_tasks', models.BooleanField(default=True)),
                ('use_extra_1', models.BooleanField(default=False)),
                ('use_extra_2', models.BooleanField(default=False)),
                ('use_extra_3', models.BooleanField(default=False)),
                ('extra_1_label', models.CharField(blank=True, max_length=25, null=True)),
                ('extra_2_label', models.CharField(blank=True, max_length=25, null=True)),
                ('extra_3_label', models.CharField(blank=True, max_length=25, null=True)),
                ('status_names', models.CharField(default=b'Todo                          Doing                         Reviewing                     Done      ', max_length=100)),
                ('task_status_names', models.CharField(default=b'Todo                          Doing                                                       Done      ', max_length=100)),
                ('velocity_type', models.PositiveIntegerField(default=1)),
                ('point_scale_type', models.PositiveIntegerField(default=0)),
                ('velocity', models.PositiveIntegerField(blank=True, null=True)),
                ('velocity_iteration_span', models.PositiveIntegerField(blank=True, null=True)),
                ('iterations_left', models.PositiveIntegerField(blank=True, null=True)),
                ('category', models.CharField(blank=True, default=b'', max_length=25, null=True)),
                ('categories', models.CharField(blank=True, max_length=1024, null=True)),
                ('token', models.CharField(default=b'', max_length=7)),
                ('burnup_reset', models.IntegerField(default=0)),
                ('burnup_reset_date', models.DateField(blank=True, default=None, null=True)),
                ('has_iterations_hidden', models.BooleanField(default=False)),
                ('abandoned', models.BooleanField(default=False)),
                ('live_updates', models.BooleanField(default=False)),
                ('story_minutes', models.IntegerField(default=0)),
                ('render_mode', models.IntegerField(default=0)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_projects_created', to=settings.AUTH_USER_MODEL, verbose_name=b'creator')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classic_projects', to='organizations.Organization')),
            ],
            options={
                'ordering': ['-active', 'name'],
                'db_table': 'projects_project',
            },
        ),
        migrations.CreateModel(
            name='ProjectExtraMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_slug', models.CharField(max_length=25, verbose_name=b'extra_slug')),
                ('configuration', models.TextField()),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_extras', to='classic.Project')),
            ],
            options={
                'db_table': 'extras_projectextramapping',
            },
        ),
        migrations.CreateModel(
            name='StepMovement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('related_iteration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='classic.Iteration')),
            ],
            options={
                'db_table': 'kanban_stepmovement',
            },
        ),
        migrations.CreateModel(
            name='StepStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField(auto_now_add=True)),
                ('stories', models.IntegerField()),
                ('points', models.IntegerField()),
            ],
            options={
                'db_table': 'kanban_stepstat',
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField()),
                ('summary', models.TextField()),
                ('local_id', models.IntegerField()),
                ('detail', models.TextField(blank=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name=b'created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name=b'modified')),
                ('points', models.CharField(blank=True, default=b'?', max_length=3, verbose_name=b'points')),
                ('status', models.IntegerField(default=1)),
                ('category', models.CharField(blank=True, max_length=25, null=True)),
                ('extra_1', models.TextField(blank=True, null=True)),
                ('extra_2', models.TextField(blank=True, null=True)),
                ('extra_3', models.TextField(blank=True, null=True)),
                ('task_counts', models.CommaSeparatedIntegerField(default=b'0,0,0,0,0,0,0,0,0,0', max_length=44)),
                ('comment_count', models.IntegerField(default=0)),
                ('has_external_links', models.BooleanField(default=False)),
                ('has_attachment', models.BooleanField(default=False)),
                ('has_commits', models.BooleanField(default=False)),
                ('tags_cache', models.CharField(blank=True, default=None, max_length=512, null=True)),
                ('epic_label', models.CharField(blank=True, default=None, max_length=32, null=True)),
                ('assignees_cache', models.CharField(blank=True, default=None, max_length=512, null=True)),
                ('estimated_minutes', models.IntegerField(default=0)),
                ('task_minutes', models.IntegerField(default=0)),
                ('assignee', models.ManyToManyField(blank=True, db_table=b'projects_story_assignee_m2m', related_name='classic_assigned_stories', to=settings.AUTH_USER_MODEL, verbose_name=b'assignees')),
                ('cell', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='classic_stories', to='classic.BoardCell')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_created_stories', to=settings.AUTH_USER_MODEL, verbose_name=b'creator')),
                ('epic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classic_stories', to='classic.Epic')),
                ('iteration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_stories', to='classic.Iteration')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_stories', to='classic.Project')),
            ],
            options={
                'db_table': 'projects_story',
            },
        ),
        migrations.CreateModel(
            name='StoryAttributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.CharField(max_length=6)),
                ('key', models.CharField(max_length=4)),
                ('value', models.CharField(max_length=10)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_extra_attributes', to='classic.Story')),
            ],
            options={
                'db_table': 'projects_storyattributes',
            },
        ),
        migrations.CreateModel(
            name='StoryMentions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_storyMention', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_notifications_storymentions',
            },
        ),
        migrations.CreateModel(
            name='StoryQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_slug', models.CharField(max_length=25, verbose_name=b'extra_slug')),
                ('external_id', models.CharField(max_length=40)),
                ('external_url', models.CharField(blank=True, max_length=256, null=True)),
                ('imported_on', models.DateTimeField(default=datetime.datetime.now)),
                ('modified', models.DateTimeField(default=datetime.datetime.now)),
                ('summary', models.TextField()),
                ('detail', models.TextField(blank=True)),
                ('points', models.CharField(blank=True, default=b'?', max_length=3, verbose_name=b'points')),
                ('status', models.IntegerField(default=1)),
                ('extra_1', models.TextField(blank=True, null=True)),
                ('extra_2', models.TextField(blank=True, null=True)),
                ('extra_3', models.TextField(blank=True, null=True)),
                ('external_extra', models.CharField(blank=True, max_length=512, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_story_queue', to='classic.Project')),
            ],
            options={
                'db_table': 'extras_storyqueue',
            },
        ),
        migrations.CreateModel(
            name='StoryTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name=b'name')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_tags', to='classic.Project')),
            ],
            options={
                'db_table': 'projects_storytag',
            },
        ),
        migrations.CreateModel(
            name='StoryTagging',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_story_tags', to='classic.Story')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_stories', to='classic.StoryTag')),
            ],
            options={
                'db_table': 'projects_storytagging',
            },
        ),
        migrations.CreateModel(
            name='SyncronizationQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extra_slug', models.CharField(max_length=25)),
                ('action', models.IntegerField(choices=[(1, b'SYNC_REMOTE'), (2, b'STORY_UPDATED'), (3, b'STORY_DELETED'), (4, b'STORY_CREATED'), (5, b'INITIAL_SYNC'), (6, b'ACTION_STORY_STATUS_CHANGED'), (7, b'ACTION_TASK_UPDATED'), (8, b'ACTION_TASK_DELETED'), (9, b'ACTION_TASK_CREATED'), (10, b'ACTION_TASK_STATUS_CHANGED'), (11, b'ACTION_STORY_IMPORTED')])),
                ('queue_date', models.DateTimeField(default=datetime.datetime.now)),
                ('external_id', models.CharField(max_length=40, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Project')),
                ('story', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classic_sync_queue', to='classic.Story')),
            ],
            options={
                'db_table': 'extras_syncronizationqueue',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('tags_cache', models.CharField(blank=True, default=None, max_length=512, null=True)),
                ('estimated_minutes', models.IntegerField(default=0)),
                ('status', models.IntegerField(default=1)),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classic_assigned_tasks', to=settings.AUTH_USER_MODEL, verbose_name=b'assignee')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_tasks', to='classic.Story')),
            ],
            options={
                'db_table': 'projects_task',
            },
        ),
        migrations.CreateModel(
            name='TaskTagging',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_tasks', to='classic.StoryTag')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_task_tags', to='classic.Task')),
            ],
            options={
                'db_table': 'projects_tasktagging',
            },
        ),
        migrations.CreateModel(
            name='TeamProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_teams', to='classic.Project')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organizations.Team')),
            ],
            options={
                'db_table': 'organizations_team_projects',
            },
        ),
        migrations.CreateModel(
            name='TimeEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minutes_spent', models.PositiveIntegerField()),
                ('notes', models.TextField()),
                ('date', models.DateField()),
                ('iteration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Iteration')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_timeEntries', to='organizations.Organization')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Project')),
                ('story', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Story')),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_time_entries', to=settings.AUTH_USER_MODEL, verbose_name=b'user')),
            ],
            options={
                'db_table': 'projects_timeentry',
            },
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_workflows', to='classic.Project')),
            ],
            options={
                'db_table': 'kanban_workflow',
            },
        ),
        migrations.CreateModel(
            name='WorkflowStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0)),
                ('name', models.CharField(max_length=128)),
                ('report_color', models.IntegerField(default=4492490, null=True)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_steps', to='classic.Workflow')),
            ],
            options={
                'db_table': 'kanban_workflowstep',
            },
        ),
        migrations.AddField(
            model_name='syncronizationqueue',
            name='task',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classic_sync_queue', to='classic.Task'),
        ),
        migrations.AddField(
            model_name='stepmovement',
            name='step_from',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='classic.WorkflowStep'),
        ),
        migrations.AddField(
            model_name='stepmovement',
            name='step_to',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='classic.WorkflowStep'),
        ),
        migrations.AddField(
            model_name='stepmovement',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Story'),
        ),
        migrations.AddField(
            model_name='stepmovement',
            name='user',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='stepmovement',
            name='workflow',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Workflow'),
        ),
        migrations.AddField(
            model_name='policyage',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Story'),
        ),
        migrations.AddField(
            model_name='policy',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classic_policies', to='classic.Project'),
        ),
        migrations.AddField(
            model_name='newsitem',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classic_newsItems', to='classic.Project'),
        ),
        migrations.AddField(
            model_name='newsitem',
            name='related_story',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classic_story', to='classic.Story'),
        ),
        migrations.AddField(
            model_name='newsitem',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classic_newsItems', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='kanbanstat',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Project'),
        ),
        migrations.AddField(
            model_name='iteration',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_iterations', to='classic.Project'),
        ),
        migrations.AddField(
            model_name='githublog',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Project'),
        ),
        migrations.AddField(
            model_name='githubcredentials',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Project'),
        ),
        migrations.AddField(
            model_name='githubcredentials',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_github_credentials', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='githubbinding',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Project'),
        ),
        migrations.AddField(
            model_name='favorite',
            name='iteration',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Iteration'),
        ),
        migrations.AddField(
            model_name='favorite',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Project'),
        ),
        migrations.AddField(
            model_name='favorite',
            name='story',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Story'),
        ),
        migrations.AddField(
            model_name='favorite',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_favorite', to=settings.AUTH_USER_MODEL, verbose_name=b'user'),
        ),
        migrations.AddField(
            model_name='externaltaskmapping',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_external_links', to='classic.Task'),
        ),
        migrations.AddField(
            model_name='externalstorymapping',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_external_links', to='classic.Story'),
        ),
        migrations.AddField(
            model_name='epic',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_epics', to='classic.Project'),
        ),
        migrations.AddField(
            model_name='commit',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_commits', to='classic.Story'),
        ),
        migrations.AddField(
            model_name='cellmovement',
            name='related_iteration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='classic.Iteration'),
        ),
        migrations.AddField(
            model_name='cellmovement',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Story'),
        ),
        migrations.AddField(
            model_name='cellmovement',
            name='user',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='boardimage',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_images', to='classic.Project'),
        ),
        migrations.AddField(
            model_name='boardheader',
            name='policy',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Policy'),
        ),
        migrations.AddField(
            model_name='boardheader',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_headers', to='classic.Project'),
        ),
        migrations.AddField(
            model_name='boardgraphic',
            name='policy',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Policy'),
        ),
        migrations.AddField(
            model_name='boardgraphic',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_graphics', to='classic.Project'),
        ),
        migrations.AddField(
            model_name='boardcell',
            name='policies',
            field=models.ManyToManyField(db_table=b'kanban_boardcell_policies', related_name='classic_cells', to='classic.Policy'),
        ),
        migrations.AddField(
            model_name='boardcell',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_boardCells', to='classic.Project'),
        ),
        migrations.AddField(
            model_name='boardcell',
            name='steps',
            field=models.ManyToManyField(db_table=b'kanban_boardcell_steps', related_name='classic_cells', to='classic.WorkflowStep'),
        ),
        migrations.AddField(
            model_name='boardcell',
            name='wip_policy',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='classic.Policy'),
        ),
        migrations.AddField(
            model_name='boardattributes',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_extra_attributes', to='classic.Project'),
        ),
        migrations.AddField(
            model_name='basecampetags',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Project'),
        ),
        migrations.AddField(
            model_name='basecampcredentials',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Project'),
        ),
        migrations.AddField(
            model_name='basecampcredentials',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classic_basecamp_credentials', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='backloghistorystories',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Story'),
        ),
        migrations.AddField(
            model_name='backloghistorysnapshot',
            name='backlog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classic.Iteration'),
        ),
    ]
