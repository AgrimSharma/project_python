import sys
from os.path import abspath, dirname, join
import logging
import os

DEBUG = True
TEMPLATE_CSS_DEBUG = True


ADMINS = ( ('Marc', 'marc.hughes@scrumdo.com'), )

GETSCRUMBAN_API = "http://www.getscrumban.com/api"

# Set this to true to add google analytics to the pages, not for use in development
GOOGLE_ANALYTICS = False
GOOGLE_ANALYTICS_ACCOUNT = ''

SESSION_COOKIE_DOMAIN = ""

SUPPORT_URL = "http://support.scrumdo.com/"
DEFAULT_FROM_EMAIL = 'scrumdo@scrumdo.com'
SERVER_EMAIL = 'scrumdo@scrumdo.com'
SITE_NAME = "ScrumDo"

SESSION_COOKIE_NAME = "ci_sessionid"

DEFAULT_FILE_STORAGE = 'storage_backend.SimpleNameS3Storage'  
AWS_ACCESS_KEY_ID = 'AKIAI6EGYWIR3DMYA42A'
AWS_SECRET_ACCESS_KEY = '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'
AWS_STORAGE_BUCKET_NAME = 'scrumdo-dev-attachments'
#AWS_STORAGE_BUCKET_NAME = 'scrumdo-ci'

CONTACT_EMAIL = "support@scrumdo.com"

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

MY_HOSTNAME = "http://localhost:8000"
STATIC_URL = MY_HOSTNAME + "/static/"
SSL_BASE_URL = MY_HOSTNAME
BASE_URL = MY_HOSTNAME
SCRUMDO_SSL_BASE_URL = MY_HOSTNAME
SCRUMBANDO_SSL_BASE_URL = "http://local.scrumbando.com:8000"

SPREEDLY_PATH="https://subs.pinpayments.com/scrumdo-beta"
SPREEDLY_SITE_NAME="scrumdo-beta"
SPREEDLY_API_TOKEN="x"

DEFAULT_FILE_STORAGE = 'storage_backend.SimpleNameS3Storage'


# NOTE: NOT DOING THIS IN PRODUCTION, STILL USING SQS
BROKER_TRANSPORT = "redis"
BROKER_URL = 'redis://localhost:6379/0'

index_name = "devqa" + os.environ.get('CIRCLE_BUILD_NUM','0');

from sdawsauth import StrBasedAWS4Auth
import elasticsearch
awsauth = StrBasedAWS4Auth(AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, 'us-east-1', 'es')
HAYSTACK_CONNECTIONS = {
    'default': {
            'ENGINE': 'apps.projects.search_backend.ScrumDoConfigurableElasticSearchEngine',
            'URL': 'https://search-scrumdo-qa-s6dri5k3rkazjetct7a2tfgxcm.us-east-1.es.amazonaws.com/',
            'INDEX_NAME': index_name,
            'KWARGS': {
                'port': 443,
                'http_auth': awsauth,
                'use_ssl': True,
                'verify_certs': True,
                'connection_class': elasticsearch.RequestsHttpConnection,
        }
    }
}


DATABASES = {
        "default": {
        "NAME": "/home/ubuntu/db/ci-scrumdo.sql",
        "ENGINE": "django.db.backends.sqlite3",
        "USER": '',
        "PASSWORD": '',
    }
}




# GitHub/oAuth url ----------------------------------------------
GITHUB_AUTH_URL = "https://github.com/login/oauth/authorize"
GITHUB_TOKEN_URL = "https://github.com/login/oauth/access_token"

GITHUB_CLIENT_ID = "x"
GITHUB_SECRET = "x"

PUBNUB_SUB_KEY = 'x'
PUBNUB_PUB_KEY = 'x'
PUBNUB_SEC_KEY = 'x'



MAILCHIMP_KEY="x"


from django.core.management.color import color_style


class DjangoColorsFormatter(logging.Formatter):
    def __init__(self, *args, **kwargs):
        super(DjangoColorsFormatter, self).__init__(*args, **kwargs)
        self.style = self.configure_style(color_style())

    def configure_style(self, style):
        style.DEBUG = style.HTTP_NOT_MODIFIED
        style.INFO = style.HTTP_INFO
        style.WARNING = style.HTTP_NOT_FOUND
        style.ERROR = style.ERROR
        style.CRITICAL = style.HTTP_SERVER_ERROR
        return style

    def format(self, record):
        message = logging.Formatter.format(self, record)
        if sys.version_info[0] < 3:
            if isinstance(message, unicode):
                message = message.encode('utf-8')
        colorizer = getattr(self.style, record.levelname, self.style.HTTP_SUCCESS)
        return colorizer(message)


import logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            '()': DjangoColorsFormatter,
            'format': '[%(asctime)s] %(levelname)s %(filename)s:%(lineno)d %(module)s.%(funcName)s\n%(message)s\n',
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'singleline': {
            'format': '- [%(asctime)s] %(levelname)s %(filename)s:%(lineno)d %(module)s.%(funcName)s %(message)s',
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'project': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
            'stream': sys.stdout
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'singleline'
        },
    },
    'loggers': {
        'django': {
            'handlers':['console'],
            'propagate': True,
            'level':'INFO',
        },
        'werkzeug': {
            'handlers': ['console'],
            'level': 'WARN',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'WARN',
            'propagate': False,
        },
        'django.contrib.staticfiles': {
            'handlers': ['console',],
            'level': 'WARN',
            'propagate': False,
        },
        '': {
            'handlers':['project'],
            'propagate': False,
            'level': 'INFO',
        }
    }
}

CELERY_ALWAYS_EAGER = True

PISTON_DISPLAY_ERRORS=True

GOOGLE_OAUTH = {
    "CLIENT_ID": "x",
    "EMAIL_ADDRESS": "x",
    "CLIENT_SECRET": "x",
    "REDIRECT_URI": "http://www.scrumdo.com/openid/login/googleauth/oauth2callback/",
    "OPENID_REALM": "http://www.scrumdo.com/openid/"
}


CACHES = {
        'default': {
                "BACKEND": "django_redis.cache.RedisCache",
                'LOCATION': 'redis://localhost/10',
                'OPTIONS': {
                        'DB': 10,
                        'PASSWORD': '',
                        'PARSER_CLASS': 'redis.connection.HiredisParser',
                        'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
                        'CONNECTION_POOL_CLASS_KWARGS': {
                                'max_connections': 50,
                                'timeout': 20,
                        }
                },
        },
}


MIXPANEL_TOKEN = "x"

SLACK_CLIENT_ID = "x"
SLACK_CLIENT_SECRET = "x"

FLOWDOCK_CLIENT_ID = 'x'
FLOWDOCK_CLIENT_SECRET = 'x'


ROLLBAR = {}


STORY_EMAIL_ADDRESS = "%d-%s@card-ci.scrumdo.com"
PROJECT_EMAIL_ADDRESS = "%s@project-ci.scrumdo.com"
